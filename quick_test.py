#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
"""

import asyncio
import sys
from datetime import datetime
from telegram_bot import TelegramPublisher
from config import BOT_TOKEN, CHANNELS

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ê–í–¢–û–ü–û–°–¢–û–í")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –≤ config.py")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    publisher = TelegramPublisher(BOT_TOKEN)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        bot_info = await publisher.bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        current_time = datetime.now().strftime('%H:%M:%S')
        test_message = f"üß™ –¢–µ—Å—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ - {current_time}"
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {test_message}")
        print(f"üì¢ –í {len(CHANNELS)} –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        results = await publisher.publish_to_all_channels(test_message)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = sum(1 for success in results.values() if success)
        failed = len(results) - successful
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
        
        if successful > 0:
            print(f"\nüéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìà –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {successful} –∏–∑ {len(results)} –∫–∞–Ω–∞–ª–æ–≤")
            return True
        else:
            print(f"\n‚ùå –í—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await quick_test()
    
    print("\n" + "=" * 40)
    if success:
        print("‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üåê –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python web_interface.py")
    else:
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.py")
    print("=" * 40)

if __name__ == "__main__":
    asyncio.run(main())


