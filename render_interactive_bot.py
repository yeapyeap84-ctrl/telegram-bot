#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è Render.com
–°–æ–≤–º–µ—Å—Ç–∏–º —Å python-telegram-bot –≤–µ—Ä—Å–∏–∏ 13.x
"""

import asyncio
import logging
import schedule
import time
import threading
from datetime import datetime
from typing import List, Dict, Optional
import pytz
import os
from flask import Flask, render_template_string, jsonify

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from config import (
        BOT_TOKEN, 
        CHANNELS, 
        PUBLISH_SCHEDULE, 
        TIMEZONE, 
        POST_TEMPLATES,
        LOG_LEVEL,
        LOG_FILE
    )
except ImportError:
    # –ï—Å–ª–∏ config.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
    CHANNELS = [
        -1002277035159, -1002195443836, -1003138556967, -1003073283084,
        -1003009581774, -1003095553897, -1003107072222, -1003127705651,
        -1002845102398, -1003109538114, -1003188704305, -1003175391285,
        -1003007890686, -1002910404940, -1003183362739, -1003193174512,
        -1003103796345, -1003173861260, -1003049221239, -1003142157172,
        -1003001850127, -1003164923728, -1003180273662, -1003129428375,
        -1003047357295, -1003112731633, -1003179889345, -1002793918718,
        -1003043204491
    ]
    PUBLISH_SCHEDULE = ['08:00', '12:00', '16:00', '19:00']
    TIMEZONE = 'Europe/Moscow'
    POST_TEMPLATES = {
        '08:00': {'text': 'üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å —Å –ø–æ–∑–∏—Ç–∏–≤–æ–º!', 'parse_mode': 'HTML'},
        '12:00': {'text': '‚òÄÔ∏è –ü–æ–ª–¥–µ–Ω—å! –í—Ä–µ–º—è –¥–ª—è –æ–±–µ–¥–∞ –∏ –ø–µ—Ä–µ—Ä—ã–≤–∞!', 'parse_mode': 'HTML'},
        '16:00': {'text': '‚òï –í—Ä–µ–º—è –¥–ª—è –∫–æ—Ñ–µ-–±—Ä–µ–π–∫–∞! –ö–∞–∫ –¥–µ–ª–∞?', 'parse_mode': 'HTML'},
        '19:00': {'text': 'üåÜ –í–µ—á–µ—Ä! –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–Ω—å –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –Ω–æ—Ç–µ!', 'parse_mode': 'HTML'}
    }
    LOG_LEVEL = 'INFO'
    LOG_FILE = 'bot.log'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ python-telegram-bot
try:
    from telegram import Bot, Update
    from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
    from telegram.error import TelegramError
    TELEGRAM_BOT_VERSION = "13.x"
except ImportError:
    try:
        from telegram import Bot, Update
        from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
        from telegram.error import TelegramError
        TELEGRAM_BOT_VERSION = "20.x"
    except ImportError:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å python-telegram-bot")
        exit(1)

class TelegramPublisher:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –∫–∞–Ω–∞–ª—ã"""
    
    def __init__(self, bot_token: str):
        self.bot = Bot(token=bot_token)
        self.channels = CHANNELS
        self.timezone = pytz.timezone(TIMEZONE)
        
    async def publish_to_channel(self, channel: str, message: str, parse_mode: str = 'HTML') -> bool:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª"""
        try:
            await self.bot.send_message(
                chat_id=channel,
                text=message,
                parse_mode=parse_mode
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {channel}")
            return True
        except TelegramError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {channel}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {channel}: {e}")
            return False
    
    async def publish_to_all_channels(self, message: str, parse_mode: str = 'HTML') -> Dict[str, bool]:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        results = {}
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        tasks = []
        for channel in self.channels:
            task = self.publish_to_channel(channel, message, parse_mode)
            tasks.append((channel, task))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        for channel, task in tasks:
            try:
                result = await task
                results[channel] = result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
                results[channel] = False
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = sum(1 for success in results.values() if success)
        failed = len(results) - successful
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} —Å –æ—à–∏–±–∫–∞–º–∏")
        
        return results
    
    def get_current_time_moscow(self) -> datetime:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ú–°–ö"""
        return datetime.now(self.timezone)
    
    def get_post_for_time(self, time_str: str) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        return POST_TEMPLATES.get(time_str)

class Scheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, publisher: TelegramPublisher):
        self.publisher = publisher
        self.schedule_times = PUBLISH_SCHEDULE
        
    def schedule_posts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        for time_str in self.schedule_times:
            schedule.every().day.at(time_str).do(self.publish_scheduled_post, time_str)
            logger.info(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ {time_str} –ú–°–ö")
    
    async def publish_scheduled_post(self, time_str: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        current_time = self.publisher.get_current_time_moscow()
        logger.info(f"üïê –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {time_str} –ú–°–ö, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M')}")
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        post_template = self.publisher.get_post_for_time(time_str)
        
        if not post_template:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {time_str}")
            return
        
        message = post_template['text']
        parse_mode = post_template.get('parse_mode', 'HTML')
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        results = await self.publisher.publish_to_all_channels(message, parse_mode)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for channel, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            logger.info(f"{status} {channel}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        self.schedule_posts()
        
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
publisher = None
scheduler = None

def start_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤!</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/post - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã:</b>
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:
"""
    for time in PUBLISH_SCHEDULE:
        welcome_text += f"‚Ä¢ {time} –ú–°–ö\n"
    
    update.message.reply_text(welcome_text, parse_mode='HTML')

def help_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>/post</b> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]
–ü—Ä–∏–º–µ—Ä: /post –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!

<b>/status</b> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

<b>/help</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã:</b>
–ë–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
"""
    update.message.reply_text(help_text, parse_mode='HTML')

def post_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /post"""
    global publisher
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Å–µ –ø–æ—Å–ª–µ /post)
    if context.args:
        message_text = ' '.join(context.args)
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_time = publisher.get_current_time_moscow()
        time_str = current_time.strftime('%H:%M')
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —à–∞–±–ª–æ–Ω
        template = None
        for scheduled_time in sorted(POST_TEMPLATES.keys()):
            if scheduled_time >= time_str:
                template = POST_TEMPLATES[scheduled_time]
                break
        
        if not template:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            template = list(POST_TEMPLATES.values())[0]
        
        message_text = template['text']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    update.message.reply_text(
        f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ {len(publisher.channels)} –∫–∞–Ω–∞–ª–æ–≤...\n"
        f"üìù –¢–µ–∫—Å—Ç: {message_text[:100]}{'...' if len(message_text) > 100 else ''}"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def publish_async():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            results = loop.run_until_complete(publisher.publish_to_all_channels(message_text))
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = sum(1 for success in results.values() if success)
            failed = len(results) - successful
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            report = f"""
üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>

‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}
‚ùå –û—à–∏–±–∫–∏: {failed}
üì§ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(results)}

<b>–î–µ—Ç–∞–ª–∏:</b>
"""
            
            for channel, success in results.items():
                status = "‚úÖ" if success else "‚ùå"
                report += f"{status} {channel}\n"
            
            update.message.reply_text(report, parse_mode='HTML')
            
        except Exception as e:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /post: {e}")
        finally:
            loop.close()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=publish_async)
    thread.start()

def status_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    global publisher
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = publisher.bot.get_me()
        current_time = publisher.get_current_time_moscow()
        
        status_text = f"""
ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>

üë§ –ë–æ—Ç: @{bot_info.username}
üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M:%S')} –ú–°–ö
üì¢ –ö–∞–Ω–∞–ª–æ–≤: {len(publisher.channels)}
‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {', '.join(PUBLISH_SCHEDULE)} –ú–°–ö

<b>–°–ª–µ–¥—É—é—â–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>
"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        for time_str in sorted(POST_TEMPLATES.keys()):
            template = POST_TEMPLATES[time_str]
            status_text += f"‚Ä¢ {time_str} - {template['text'][:50]}...\n"
        
        update.message.reply_text(status_text, parse_mode='HTML')
        
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status: {e}")

def handle_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global publisher, scheduler
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ Telegram –±–æ—Ç–∞ –¥–ª—è Render")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        logger.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –≤ config.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä publisher
    publisher = TelegramPublisher(BOT_TOKEN)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = Scheduler(publisher)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=scheduler.run_scheduler, daemon=True)
    scheduler_thread.start()
    
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
    logger.info(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {', '.join(PUBLISH_SCHEDULE)} –ú–°–ö")
    logger.info(f"üì¢ –ö–∞–Ω–∞–ª—ã: {len(CHANNELS)} –∫–∞–Ω–∞–ª–æ–≤")
    logger.info("üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /post, /status")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    if TELEGRAM_BOT_VERSION == "13.x":
        # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å Updater
        updater = Updater(token=BOT_TOKEN, use_context=True)
        dispatcher = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dispatcher.add_handler(CommandHandler("start", start_command))
        dispatcher.add_handler(CommandHandler("help", help_command))
        dispatcher.add_handler(CommandHandler("post", post_command))
        dispatcher.add_handler(CommandHandler("status", status_command))
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        updater.start_polling()
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
        updater.idle()
    else:
        # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å Application
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("post", post_command))
        app.add_handler(CommandHandler("status", status_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        app.run_polling()
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == "__main__":
    main()
