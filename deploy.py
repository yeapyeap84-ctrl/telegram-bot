#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è Telegram –±–æ—Ç–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ö–æ—Å—Ç–∏–Ω–≥–∏
"""

import os
import subprocess
import sys

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –¥–µ–ø–ª–æ—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –¥–µ–ø–ª–æ—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose
    try:
        result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    return True

def deploy_local():
    """–î–µ–ø–ª–æ–π –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É"""
    print("\nüöÄ –î–µ–ø–ª–æ–π –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É...")
    
    if not check_requirements():
        print("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è")
        return False
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑
        print("üì¶ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...")
        subprocess.run(['docker-compose', 'build'], check=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
        subprocess.run(['docker-compose', 'up', '-d'], check=True)
        
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!")
        print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:5000/api/status")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ: {e}")
        return False

def deploy_heroku():
    """–î–µ–ø–ª–æ–π –Ω–∞ Heroku"""
    print("\nüöÄ –î–µ–ø–ª–æ–π –Ω–∞ Heroku...")
    
    # –°–æ–∑–¥–∞–µ–º Procfile –¥–ª—è Heroku
    procfile_content = """web: python bot_hosting.py"""
    
    with open('Procfile', 'w') as f:
        f.write(procfile_content)
    
    print("üìù –°–æ–∑–¥–∞–Ω Procfile –¥–ª—è Heroku")
    
    # –°–æ–∑–¥–∞–µ–º runtime.txt
    runtime_content = """python-3.11.0"""
    
    with open('runtime.txt', 'w') as f:
        f.write(runtime_content)
    
    print("üìù –°–æ–∑–¥–∞–Ω runtime.txt")
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Heroku:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Heroku CLI")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç: heroku login")
    print("3. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: heroku create your-bot-name")
    print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   heroku config:set BOT_TOKEN=your_bot_token")
    print("5. –î–µ–ø–ª–æ–π: git push heroku main")
    print("6. –ó–∞–ø—É—Å–∫: heroku ps:scale web=1")
    
    return True

def deploy_railway():
    """–î–µ–ø–ª–æ–π –Ω–∞ Railway"""
    print("\nüöÄ –î–µ–ø–ª–æ–π –Ω–∞ Railway...")
    
    # –°–æ–∑–¥–∞–µ–º railway.json
    railway_config = {
        "build": {
            "builder": "NIXPACKS"
        },
        "deploy": {
            "startCommand": "python bot_hosting.py",
            "restartPolicyType": "ON_FAILURE",
            "restartPolicyMaxRetries": 10
        }
    }
    
    import json
    with open('railway.json', 'w') as f:
        json.dump(railway_config, f, indent=2)
    
    print("üìù –°–æ–∑–¥–∞–Ω railway.json")
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Railway:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Railway CLI")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç: railway login")
    print("3. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç: railway init")
    print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   railway variables set BOT_TOKEN=your_bot_token")
    print("5. –î–µ–ø–ª–æ–π: railway up")
    
    return True

def deploy_render():
    """–î–µ–ø–ª–æ–π –Ω–∞ Render"""
    print("\nüöÄ –î–µ–ø–ª–æ–π –Ω–∞ Render...")
    
    # –°–æ–∑–¥–∞–µ–º render.yaml
    render_config = """services:
  - type: web
    name: telegram-bot
    env: python
    buildCommand: pip install -r requirements.txt && pip install flask
    startCommand: python bot_hosting.py
    envVars:
      - key: BOT_TOKEN
        sync: false"""
    
    with open('render.yaml', 'w') as f:
        f.write(render_config)
    
    print("üìù –°–æ–∑–¥–∞–Ω render.yaml")
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render:")
    print("1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ render.com")
    print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    print("3. –°–æ–∑–¥–∞–π—Ç–µ Web Service")
    print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   BOT_TOKEN=your_bot_token")
    print("5. –î–µ–ø–ª–æ–π –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("=" * 60)
    print("üöÄ –î–ï–ü–õ–û–ô TELEGRAM –ë–û–¢–ê –ù–ê –•–û–°–¢–ò–ù–ì")
    print("=" * 60)
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –¥–µ–ø–ª–æ—è:")
    print("1. üñ•Ô∏è  –õ–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ (Docker)")
    print("2. ‚òÅÔ∏è  Heroku")
    print("3. üöÇ Railway")
    print("4. üé® Render")
    print("5. ‚ùå –í—ã—Ö–æ–¥")
    
    while True:
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
            
            if choice == '1':
                deploy_local()
                break
            elif choice == '2':
                deploy_heroku()
                break
            elif choice == '3':
                deploy_railway()
                break
            elif choice == '4':
                deploy_render()
                break
            elif choice == '5':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1-5")
                
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥...")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            break

if __name__ == "__main__":
    main()
