#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from interactive_bot import InteractiveBot
from config import BOT_TOKEN, CHANNELS, POST_TEMPLATES

async def test_bot_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É...")
    
    try:
        bot = InteractiveBot(BOT_TOKEN)
        bot_info = await bot.publisher.bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

async def test_post_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤...")
    
    try:
        bot = InteractiveBot(BOT_TOKEN)
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞"
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {len(CHANNELS)} –∫–∞–Ω–∞–ª–æ–≤...")
        print(f"üìù –¢–µ–∫—Å—Ç: {test_message}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        results = await bot.publisher.publish_to_all_channels(test_message)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = sum(1 for success in results.values() if success)
        failed = len(results) - successful
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {failed}")
        
        if successful > 0:
            print("üéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –í—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

async def test_templates():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç–æ–≤"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç–æ–≤...")
    
    try:
        print("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:")
        for time_key, template in POST_TEMPLATES.items():
            print(f"  {time_key}: {template['text']}")
        
        print(f"\nüìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {len(POST_TEMPLATES)} —à–∞–±–ª–æ–Ω–æ–≤")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –ë–û–¢–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
    connection_ok = await test_bot_connection()
    
    # –¢–µ—Å—Ç 2: –®–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤
    templates_ok = await test_templates()
    
    # –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ)
    posts_ok = False
    if connection_ok:
        posts_ok = await test_post_functionality()
    
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    if connection_ok:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É: OK")
    else:
        print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É: –û–®–ò–ë–ö–ê")
    
    if templates_ok:
        print("‚úÖ –®–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤: OK")
    else:
        print("‚ùå –®–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤: –û–®–ò–ë–ö–ê")
    
    if posts_ok:
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤: OK")
    else:
        print("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤: –û–®–ò–ë–ö–ê")
    
    print("\nüéØ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ:")
    print("/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    print("/post - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã")
    print("/post [—Ç–µ–∫—Å—Ç] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Å—Ç")
    print("/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
    print("/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    
    if connection_ok and templates_ok:
        print("\nüöÄ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python start_interactive_bot.py")
    else:
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.py")
    
    print("=" * 50)

if __name__ == "__main__":
    asyncio.run(main())
