import asyncio
import logging
import schedule
import time
from datetime import datetime
from typing import List, Dict, Optional
import pytz
from telegram import Bot
from telegram.error import TelegramError
from config import (
    BOT_TOKEN, 
    CHANNELS, 
    PUBLISH_SCHEDULE, 
    TIMEZONE, 
    POST_TEMPLATES,
    LOG_LEVEL,
    LOG_FILE
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TelegramPublisher:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –∫–∞–Ω–∞–ª—ã"""
    
    def __init__(self, bot_token: str):
        self.bot = Bot(token=bot_token)
        self.channels = CHANNELS
        self.timezone = pytz.timezone(TIMEZONE)
        
    async def publish_to_channel(self, channel: str, message: str, parse_mode: str = 'HTML') -> bool:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª"""
        try:
            await self.bot.send_message(
                chat_id=channel,
                text=message,
                parse_mode=parse_mode
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {channel}")
            return True
        except TelegramError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {channel}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {channel}: {e}")
            return False
    
    async def publish_to_all_channels(self, message: str, parse_mode: str = 'HTML') -> Dict[str, bool]:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        results = {}
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        tasks = []
        for channel in self.channels:
            task = self.publish_to_channel(channel, message, parse_mode)
            tasks.append((channel, task))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        for channel, task in tasks:
            try:
                result = await task
                results[channel] = result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
                results[channel] = False
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = sum(1 for success in results.values() if success)
        failed = len(results) - successful
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} —Å –æ—à–∏–±–∫–∞–º–∏")
        
        return results
    
    def get_current_time_moscow(self) -> datetime:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ú–°–ö"""
        return datetime.now(self.timezone)
    
    def get_post_for_time(self, time_str: str) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        return POST_TEMPLATES.get(time_str)

class Scheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, publisher: TelegramPublisher):
        self.publisher = publisher
        self.schedule_times = PUBLISH_SCHEDULE
        
    def schedule_posts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        for time_str in self.schedule_times:
            schedule.every().day.at(time_str).do(self.publish_scheduled_post, time_str)
            logger.info(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ {time_str} –ú–°–ö")
    
    async def publish_scheduled_post(self, time_str: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        current_time = self.publisher.get_current_time_moscow()
        logger.info(f"üïê –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {time_str} –ú–°–ö, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M')}")
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        post_template = self.publisher.get_post_for_time(time_str)
        
        if not post_template:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {time_str}")
            return
        
        message = post_template['text']
        parse_mode = post_template.get('parse_mode', 'HTML')
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        results = await self.publisher.publish_to_all_channels(message, parse_mode)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for channel, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            logger.info(f"{status} {channel}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        self.schedule_posts()
        
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        logger.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –≤ config.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤
    publisher = TelegramPublisher(BOT_TOKEN)
    scheduler = Scheduler(publisher)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
    try:
        bot_info = await publisher.bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    scheduler_thread = threading.Thread(target=scheduler.run_scheduler, daemon=True)
    scheduler_thread.start()
    
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
    logger.info(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {', '.join(PUBLISH_SCHEDULE)} –ú–°–ö")
    logger.info(f"üì¢ –ö–∞–Ω–∞–ª—ã: {len(CHANNELS)} –∫–∞–Ω–∞–ª–æ–≤")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    asyncio.run(main())

