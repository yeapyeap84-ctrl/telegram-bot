#!/usr/bin/env python3
"""
Telegram –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞ –¥–ª—è Render.com
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã
"""

import asyncio
import logging
import schedule
import time
import threading
from datetime import datetime
from typing import List, Dict, Optional
import pytz
import os
import requests
import json
import base64
import io

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from config import (
        BOT_TOKEN, 
        CHANNELS, 
        PUBLISH_SCHEDULE, 
        TIMEZONE, 
        POST_TEMPLATES,
        LOG_LEVEL,
        LOG_FILE
    )
except ImportError:
    # –ï—Å–ª–∏ config.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
    CHANNELS = [
        -1002277035159, -1002195443836, -1003138556967, -1003073283084,
        -1003009581774, -1003095553897, -1003107072222, -1003127705651,
        -1002845102398, -1003109538114, -1003188704305, -1003175391285,
        -1003007890686, -1002910404940, -1003183362739, -1003193174512,
        -1003103796345, -1003173861260, -1003049221239, -1003142157172,
        -1003001850127, -1003164923728, -1003180273662, -1003129428375,
        -1003047357295, -1003112731633, -1003179889345, -1002793918718,
        -1003043204491
    ]
    PUBLISH_SCHEDULE = ['08:00', '12:00', '16:00', '19:00']
    TIMEZONE = 'Europe/Moscow'
    POST_TEMPLATES = {
        '08:00': {'text': 'üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å —Å –ø–æ–∑–∏—Ç–∏–≤–æ–º!', 'parse_mode': 'HTML'},
        '12:00': {'text': '‚òÄÔ∏è –ü–æ–ª–¥–µ–Ω—å! –í—Ä–µ–º—è –¥–ª—è –æ–±–µ–¥–∞ –∏ –ø–µ—Ä–µ—Ä—ã–≤–∞!', 'parse_mode': 'HTML'},
        '16:00': {'text': '‚òï –í—Ä–µ–º—è –¥–ª—è –∫–æ—Ñ–µ-–±—Ä–µ–π–∫–∞! –ö–∞–∫ –¥–µ–ª–∞?', 'parse_mode': 'HTML'},
        '19:00': {'text': 'üåÜ –í–µ—á–µ—Ä! –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–Ω—å –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –Ω–æ—Ç–µ!', 'parse_mode': 'HTML'}
    }
    LOG_LEVEL = 'INFO'
    LOG_FILE = 'bot.log'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MediaTelegramBot:
    """Telegram –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.api_url = f"https://api.telegram.org/bot{bot_token}"
        self.channels = CHANNELS
        self.timezone = pytz.timezone(TIMEZONE)
        self.last_update_id = 0
        
    def send_message(self, chat_id: str, text: str, parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            url = f"{self.api_url}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': parse_mode
            }
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat_id}: {e}")
            return False
    
    def send_photo(self, chat_id: str, photo_url: str, caption: str = "", parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            url = f"{self.api_url}/sendPhoto"
            data = {
                'chat_id': chat_id,
                'photo': photo_url,
                'caption': caption,
                'parse_mode': parse_mode
            }
            response = requests.post(url, data=data, timeout=15)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ {chat_id}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ {chat_id}: {e}")
            return False
    
    def send_video(self, chat_id: str, video_url: str, caption: str = "", parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ"""
        try:
            url = f"{self.api_url}/sendVideo"
            data = {
                'chat_id': chat_id,
                'video': video_url,
                'caption': caption,
                'parse_mode': parse_mode
            }
            response = requests.post(url, data=data, timeout=20)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ {chat_id}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –≤ {chat_id}: {e}")
            return False
    
    def send_document(self, chat_id: str, document_url: str, caption: str = "", parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            url = f"{self.api_url}/sendDocument"
            data = {
                'chat_id': chat_id,
                'document': document_url,
                'caption': caption,
                'parse_mode': parse_mode
            }
            response = requests.post(url, data=data, timeout=20)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ {chat_id}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ {chat_id}: {e}")
            return False
    
    def send_media_to_all_channels(self, media_type: str, media_url: str, caption: str = "", parse_mode: str = 'HTML') -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        results = {}
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é {media_type} –≤ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤")
        
        for channel in self.channels:
            if media_type == 'photo':
                success = self.send_photo(str(channel), media_url, caption, parse_mode)
            elif media_type == 'video':
                success = self.send_video(str(channel), media_url, caption, parse_mode)
            elif media_type == 'document':
                success = self.send_document(str(channel), media_url, caption, parse_mode)
            else:
                success = self.send_message(str(channel), caption, parse_mode)
            
            results[channel] = success
        
        successful = sum(1 for success in results.values() if success)
        failed = len(results) - successful
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} —Å –æ—à–∏–±–∫–∞–º–∏")
        return results
    
    def send_message_to_all_channels(self, text: str, parse_mode: str = 'HTML') -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        results = {}
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤")
        
        for channel in self.channels:
            success = self.send_message(str(channel), text, parse_mode)
            results[channel] = success
        
        successful = sum(1 for success in results.values() if success)
        failed = len(results) - successful
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} —Å –æ—à–∏–±–∫–∞–º–∏")
        return results
    
    def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            url = f"{self.api_url}/getUpdates"
            params = {
                'offset': self.last_update_id + 1,
                'timeout': 10
            }
            response = requests.get(url, params=params, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return data.get('result', [])
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            if text.startswith('/start'):
                welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤!</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/post - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
/photo - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
/video - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã:</b>
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:
"""
                for time in PUBLISH_SCHEDULE:
                    welcome_text += f"‚Ä¢ {time} –ú–°–ö\n"
                
                self.send_message(chat_id, welcome_text, 'HTML')
                
            elif text.startswith('/help'):
                help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>/post</b> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]
–ü—Ä–∏–º–µ—Ä: /post –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!

<b>/photo</b> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /photo [URL —Ñ–æ—Ç–æ] [–ø–æ–¥–ø–∏—Å—å]
–ü—Ä–∏–º–µ—Ä: /photo https://example.com/photo.jpg –ú–æ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è

<b>/video</b> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /video [URL –≤–∏–¥–µ–æ] [–ø–æ–¥–ø–∏—Å—å]
–ü—Ä–∏–º–µ—Ä: /video https://example.com/video.mp4 –ú–æ–µ –≤–∏–¥–µ–æ

<b>/status</b> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

<b>/help</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã:</b>
–ë–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
"""
                self.send_message(chat_id, help_text, 'HTML')
                
            elif text.startswith('/post'):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /post
                post_text = text[5:].strip()
                
                if not post_text:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω
                    current_time = datetime.now(self.timezone)
                    time_str = current_time.strftime('%H:%M')
                    
                    template = None
                    for scheduled_time in sorted(POST_TEMPLATES.keys()):
                        if scheduled_time >= time_str:
                            template = POST_TEMPLATES[scheduled_time]
                            break
                    
                    if not template:
                        template = list(POST_TEMPLATES.values())[0]
                    
                    post_text = template['text']
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                self.send_message(chat_id, f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤...")
                
                # –ü—É–±–ª–∏–∫—É–µ–º –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
                results = self.send_message_to_all_channels(post_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                successful = sum(1 for success in results.values() if success)
                failed = len(results) - successful
                
                report = f"""
üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>

‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}
‚ùå –û—à–∏–±–∫–∏: {failed}
üì§ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(results)}
"""
                self.send_message(chat_id, report, 'HTML')
                
            elif text.startswith('/photo'):
                # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å –ø–æ—Å–ª–µ /photo
                parts = text[6:].strip().split(' ', 1)
                photo_url = parts[0] if parts else ""
                caption = parts[1] if len(parts) > 1 else ""
                
                if not photo_url:
                    self.send_message(chat_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ URL —Ñ–æ—Ç–æ: /photo https://example.com/photo.jpg [–ø–æ–¥–ø–∏—Å—å]")
                    return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                self.send_message(chat_id, f"üì∏ –ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Ñ–æ—Ç–æ –≤ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤...")
                
                # –ü—É–±–ª–∏–∫—É–µ–º –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
                results = self.send_media_to_all_channels('photo', photo_url, caption)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                successful = sum(1 for success in results.values() if success)
                failed = len(results) - successful
                
                report = f"""
üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ:</b>

‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}
‚ùå –û—à–∏–±–∫–∏: {failed}
üì§ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(results)}
"""
                self.send_message(chat_id, report, 'HTML')
                
            elif text.startswith('/video'):
                # –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ –∏ –ø–æ–¥–ø–∏—Å—å –ø–æ—Å–ª–µ /video
                parts = text[6:].strip().split(' ', 1)
                video_url = parts[0] if parts else ""
                caption = parts[1] if len(parts) > 1 else ""
                
                if not video_url:
                    self.send_message(chat_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ URL –≤–∏–¥–µ–æ: /video https://example.com/video.mp4 [–ø–æ–¥–ø–∏—Å—å]")
                    return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                self.send_message(chat_id, f"üé• –ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤...")
                
                # –ü—É–±–ª–∏–∫—É–µ–º –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
                results = self.send_media_to_all_channels('video', video_url, caption)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                successful = sum(1 for success in results.values() if success)
                failed = len(results) - successful
                
                report = f"""
üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:</b>

‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}
‚ùå –û—à–∏–±–∫–∏: {failed}
üì§ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(results)}
"""
                self.send_message(chat_id, report, 'HTML')
                
            elif text.startswith('/status'):
                current_time = datetime.now(self.timezone)
                
                status_text = f"""
ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>

üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M:%S')} –ú–°–ö
üì¢ –ö–∞–Ω–∞–ª–æ–≤: {len(self.channels)}
‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {', '.join(PUBLISH_SCHEDULE)} –ú–°–ö

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞:</b>
‚Ä¢ –¢–µ–∫—Å—Ç (/post)
‚Ä¢ –§–æ—Ç–æ (/photo)
‚Ä¢ –í–∏–¥–µ–æ (/video)

<b>–°–ª–µ–¥—É—é—â–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>
"""
                
                for time_str in sorted(POST_TEMPLATES.keys()):
                    template = POST_TEMPLATES[time_str]
                    status_text += f"‚Ä¢ {time_str} - {template['text'][:50]}...\n"
                
                self.send_message(chat_id, status_text, 'HTML')
                
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def run_polling(self):
        """–ó–∞–ø—É—Å–∫ polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        while True:
            try:
                updates = self.get_updates()
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        self.process_message(update['message'])
                
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ polling: {e}")
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

class Scheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, bot: MediaTelegramBot):
        self.bot = bot
        self.schedule_times = PUBLISH_SCHEDULE
        
    def schedule_posts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        for time_str in self.schedule_times:
            schedule.every().day.at(time_str).do(self.publish_scheduled_post, time_str)
            logger.info(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ {time_str} –ú–°–ö")
    
    def publish_scheduled_post(self, time_str: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        current_time = datetime.now(self.bot.timezone)
        logger.info(f"üïê –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {time_str} –ú–°–ö, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M')}")
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        post_template = POST_TEMPLATES.get(time_str)
        
        if not post_template:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {time_str}")
            return
        
        message = post_template['text']
        parse_mode = post_template.get('parse_mode', 'HTML')
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        results = self.bot.send_message_to_all_channels(message, parse_mode)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for channel, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            logger.info(f"{status} {channel}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        self.schedule_posts()
        
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞ –¥–ª—è Render")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        logger.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –≤ config.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = MediaTelegramBot(BOT_TOKEN)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = Scheduler(bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=scheduler.run_scheduler, daemon=True)
    scheduler_thread.start()
    
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
    logger.info(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {', '.join(PUBLISH_SCHEDULE)} –ú–°–ö")
    logger.info(f"üì¢ –ö–∞–Ω–∞–ª—ã: {len(CHANNELS)} –∫–∞–Ω–∞–ª–æ–≤")
    logger.info("üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /post, /photo, /video, /status")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        bot.run_polling()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
